# Chapter 3: Lists, Stacks and Queues

## 3.1 Abstract Data Types (ADTs)
 An ADT is a set of objects together with a set of operations.

## 3.2 The List ADT （表）
For a list of form $A_0,A_1,...,A_{N-1}$, we say that size = N. N = 0 means empty list.

For any list (except empty list), **$A_i$ succeeds/follows (后继) $A_{i-1}$**, and that **$A_{i-1}$ precedes (前驱) $A_i$**. (n. predecessor)

* First element: $A_0$. 
* Last element: $A_{N-1}$. 
* Position: $i$
.
### 3.2.1 Simple Array Implementation of Lists
printList: Linear

findKth: constant

**insert/remove:**
* worst-case: **at 0: O(N)**
* best-case: **at high end: O(1)**

# 3.2.2 Simple Linked List (单链表)
The linked list consists of a series of nodes, which are **not necessarily adjacent (相邻的) in memory**. Each node contains the **element** and a **next link**. The last cell's next link points to **nullptr**.

* printList()/find(x): Start at 1st node and traverse the list by following the next links. **Linear-time (might greater than an array)**.
* findKth(i): Traversing down the list. **O(i) time**.(However, the bound is pessimistic cuz frequently the calls to it are sorted order, such as findKth(2),findKth(3),findKth(4) can all be executed in one scan).
* remove(): Change the next pointer.
* insert(): Obtain a new node by **new** and executing two next pointer maneuvers (US ver. of "manoeuver").

## 3.3 STL vector and list